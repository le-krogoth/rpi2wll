name: Build Buildroot

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/buildroot/buildroot
  REPO_BRANCH: 2024.05.x
  CONFIG_FILE: .config
  POST_BUILD_FILE: post_build.sh
  POST_IMAGE_FILE: post_image.sh
  AUTO_WIFI_FILE: auto_wifi.psk
  DEFAULT_USERS_FILE: default_users
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Europe/Paris

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo apt install bc bison linux-headers-$(uname -r)
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH buildroot
        ln -sf /workdir/buildroot $GITHUB_WORKSPACE/buildroot

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files buildroot/files
        [ -e package ] && cp -r package/ buildroot
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE buildroot/.config
        [ -e $POST_BUILD_FILE ] && mv $POST_BUILD_FILE buildroot/$POST_BUILD_FILE && chmod +x buildroot/$POST_BUILD_FILE
        [ -e $POST_IMAGE_FILE ] && mv $POST_IMAGE_FILE buildroot/$POST_IMAGE_FILE && chmod +x buildroot/$POST_IMAGE_FILE
        [ -e $AUTO_WIFI_FILE ] && mv $AUTO_WIFI_FILE buildroot/$AUTO_WIFI_FILE
        [ -e $DEFAULT_USERS_FILE ] && mv $DEFAULT_USERS_FILE buildroot/$DEFAULT_USERS_FILE
        echo $SHELL
        cd buildroot
        ls -alh

    - name: SSH connection to Actions
      uses: csexton/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Compile the firmware
      id: compile
      run: |
        cd buildroot
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> "$GITHUB_OUTPUT"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> "$GITHUB_ENV"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> "$GITHUB_ENV"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: buildroot_target${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: buildroot/output/images

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd buildroot/output/images
        echo "FIRMWARE=$PWD" >> "$GITHUB_ENV"
        echo "status=success" >> "$GITHUB_OUTPUT"
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: buildroot_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

